// vite.config.ts
import { resolve } from "path";
import react from "file:///D:/Ace/Work/Business/Richardson/accelerate-quick-check/node_modules/.pnpm/@vitejs+plugin-react@3.1.0_vite@4.2.1/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { defineConfig } from "file:///D:/Ace/Work/Business/Richardson/accelerate-quick-check/node_modules/.pnpm/vite@4.2.1/node_modules/vite/dist/node/index.js";
import dts from "file:///D:/Ace/Work/Business/Richardson/accelerate-quick-check/node_modules/.pnpm/vite-plugin-dts@1.7.3_vite@4.2.1/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var dependencies = {
  "@apollo/client": "^3.7.11",
  "@remix-run/react": "^1.14.3",
  "@remix-run/testing": "^1.15.0",
  "@storybook/client-api": "^7.0.4",
  "@tanstack/react-table": "^8.7.9",
  "chart.js": "^4.2.1",
  graphql: "^16.6.0",
  "object-hash": "^3.0.0",
  react: "^18.2.0",
  "react-chartjs-2": "^5.2.0",
  "react-confetti": "^6.1.0",
  "react-dom": "^18.2.0",
  "react-use": "^17.4.0"
};

// vite.config.ts
var __vite_injected_original_dirname = "D:\\Ace\\Work\\Business\\Richardson\\accelerate-quick-check\\packages\\learner-ui";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    dts({
      include: ["./src/**/*"]
    })
  ],
  resolve: {
    alias: [{ find: "~", replacement: resolve(__vite_injected_original_dirname, "src") }]
  },
  build: {
    lib: {
      entry: resolve(__vite_injected_original_dirname, "src/index.ts"),
      name: "index",
      formats: ["es", "cjs"],
      fileName: (format) => `index.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(dependencies)]
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxcQWNlXFxcXFdvcmtcXFxcQnVzaW5lc3NcXFxcUmljaGFyZHNvblxcXFxhY2NlbGVyYXRlLXF1aWNrLWNoZWNrXFxcXHBhY2thZ2VzXFxcXGxlYXJuZXItdWlcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkQ6XFxcXEFjZVxcXFxXb3JrXFxcXEJ1c2luZXNzXFxcXFJpY2hhcmRzb25cXFxcYWNjZWxlcmF0ZS1xdWljay1jaGVja1xcXFxwYWNrYWdlc1xcXFxsZWFybmVyLXVpXFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9EOi9BY2UvV29yay9CdXNpbmVzcy9SaWNoYXJkc29uL2FjY2VsZXJhdGUtcXVpY2stY2hlY2svcGFja2FnZXMvbGVhcm5lci11aS92aXRlLmNvbmZpZy50c1wiO2ltcG9ydCB7IHJlc29sdmUgfSBmcm9tIFwicGF0aFwiO1xuXG5pbXBvcnQgcmVhY3QgZnJvbSBcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI7XG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xuaW1wb3J0IGR0cyBmcm9tIFwidml0ZS1wbHVnaW4tZHRzXCI7XG5cbmltcG9ydCAqIGFzIHBhY2thZ2VKc29uIGZyb20gXCIuL3BhY2thZ2UuanNvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICBwbHVnaW5zOiBbXG4gICAgcmVhY3QoKSxcbiAgICBkdHMoe1xuICAgICAgaW5jbHVkZTogW1wiLi9zcmMvKiovKlwiXSxcbiAgICB9KSxcbiAgXSxcbiAgcmVzb2x2ZToge1xuICAgIGFsaWFzOiBbeyBmaW5kOiBcIn5cIiwgcmVwbGFjZW1lbnQ6IHJlc29sdmUoX19kaXJuYW1lLCBcInNyY1wiKSB9XSxcbiAgfSxcbiAgYnVpbGQ6IHtcbiAgICBsaWI6IHtcbiAgICAgIGVudHJ5OiByZXNvbHZlKF9fZGlybmFtZSwgXCJzcmMvaW5kZXgudHNcIiksXG4gICAgICBuYW1lOiBcImluZGV4XCIsXG4gICAgICBmb3JtYXRzOiBbXCJlc1wiLCBcImNqc1wiXSxcbiAgICAgIGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBgaW5kZXguJHtmb3JtYXR9LmpzYCxcbiAgICB9LFxuICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgIGV4dGVybmFsOiBbLi4uT2JqZWN0LmtleXMocGFja2FnZUpzb24uZGVwZW5kZW5jaWVzKV0sXG4gICAgfSxcbiAgfSxcbn0pO1xuIiwgIntcbiAgXCJuYW1lXCI6IFwiYWNjZWxlcmF0ZS1sZWFybmVyLXVpXCIsXG4gIFwicHJpdmF0ZVwiOiB0cnVlLFxuICBcInZlcnNpb25cIjogXCIwLjAuMFwiLFxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcInNiXCI6IFwic3Rvcnlib29rIGRldiAtcCA2MDA2XCIsXG4gICAgXCJkZXZcIjogXCJjb25jdXJyZW50bHkgXFxcInBucG0gcnVuIGJ1aWxkIC0td2F0Y2hcXFwiIFxcXCJwbnBtIHJ1biBjb2RlZ2VuIC0td2F0Y2hcXFwiXCIsXG4gICAgXCJidWlsZFwiOiBcInRzdXAgc3JjL2luZGV4LnRzeCAtLWZvcm1hdCBlc20sY2pzIC0tZHRzIC0tZXh0ZXJuYWwgcmVhY3RcIixcbiAgICBcImNsZWFuXCI6IFwicmltcmFmIGRpc3Qgc3Rvcnlib29rLXN0YXRpY1wiLFxuICAgIFwiY29kZWdlblwiOiBcImdyYXBocWwtY29kZWdlblwiLFxuICAgIFwidHlwZWNoZWNrXCI6IFwidHNjXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGFwb2xsby9jbGllbnRcIjogXCJeMy43LjExXCIsXG4gICAgXCJAcmVtaXgtcnVuL3JlYWN0XCI6IFwiXjEuMTQuM1wiLFxuICAgIFwiQHJlbWl4LXJ1bi90ZXN0aW5nXCI6IFwiXjEuMTUuMFwiLFxuICAgIFwiQHN0b3J5Ym9vay9jbGllbnQtYXBpXCI6IFwiXjcuMC40XCIsXG4gICAgXCJAdGFuc3RhY2svcmVhY3QtdGFibGVcIjogXCJeOC43LjlcIixcbiAgICBcImNoYXJ0LmpzXCI6IFwiXjQuMi4xXCIsXG4gICAgXCJncmFwaHFsXCI6IFwiXjE2LjYuMFwiLFxuICAgIFwib2JqZWN0LWhhc2hcIjogXCJeMy4wLjBcIixcbiAgICBcInJlYWN0XCI6IFwiXjE4LjIuMFwiLFxuICAgIFwicmVhY3QtY2hhcnRqcy0yXCI6IFwiXjUuMi4wXCIsXG4gICAgXCJyZWFjdC1jb25mZXR0aVwiOiBcIl42LjEuMFwiLFxuICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjIuMFwiLFxuICAgIFwicmVhY3QtdXNlXCI6IFwiXjE3LjQuMFwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBncmFwaHFsLWNvZGVnZW4vY2xpXCI6IFwiXjMuMy4wXCIsXG4gICAgXCJAZ3JhcGhxbC1jb2RlZ2VuL2NsaWVudC1wcmVzZXRcIjogXCJeMy4wLjBcIixcbiAgICBcIkBncmFwaHFsLXR5cGVkLWRvY3VtZW50LW5vZGUvY29yZVwiOiBcIl4zLjIuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWljb25zXCI6IFwiXjEuMi4wXCIsXG4gICAgXCJAc3Rvcnlib29rL2FkZG9uLWFjdGlvbnNcIjogXCJeNy4wLjAtcmMuNFwiLFxuICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1lc3NlbnRpYWxzXCI6IFwiXjcuMC4wLXJjLjRcIixcbiAgICBcIkBzdG9yeWJvb2svYWRkb24taW50ZXJhY3Rpb25zXCI6IFwiXjcuMC4wLXJjLjRcIixcbiAgICBcIkBzdG9yeWJvb2svYWRkb24tbGlua3NcIjogXCJeNy4wLjAtcmMuNFwiLFxuICAgIFwiQHN0b3J5Ym9vay9hZGRvbnNcIjogXCJeNy4wLjAtcmMuNFwiLFxuICAgIFwiQHN0b3J5Ym9vay9yZWFjdFwiOiBcIl43LjAuMC1yYy40XCIsXG4gICAgXCJAc3Rvcnlib29rL3JlYWN0LXZpdGVcIjogXCJeNy4wLjAtcmMuNFwiLFxuICAgIFwiQHN0b3J5Ym9vay90ZXN0aW5nLWxpYnJhcnlcIjogXCJeMC4wLjE0LW5leHQuMVwiLFxuICAgIFwiQHN0b3J5Ym9vay90aGVtaW5nXCI6IFwiXjcuMC4wLXJjLjRcIixcbiAgICBcIkB0YWlsd2luZGNzcy9mb3Jtc1wiOiBcIl4wLjUuM1wiLFxuICAgIFwiQHR5cGVzL29iamVjdC1oYXNoXCI6IFwiXjMuMC4yXCIsXG4gICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMC4yOFwiLFxuICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4wLjExXCIsXG4gICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiOiBcIl4zLjEuMFwiLFxuICAgIFwiYXV0b3ByZWZpeGVyXCI6IFwiXjEwLjQuMTRcIixcbiAgICBcImNsYXNzbmFtZXNcIjogXCJeMi4zLjJcIixcbiAgICBcImNvbmN1cnJlbnRseVwiOiBcIl44LjAuMVwiLFxuICAgIFwiZG90ZW52XCI6IFwiXjE2LjAuM1wiLFxuICAgIFwiZXNsaW50XCI6IFwiXjguMzYuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1qc3gtYTExeVwiOiBcIl42LjcuMVwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1wcmV0dGllclwiOiBcIl40LjIuMVwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdFwiOiBcIl43LjMyLjJcIixcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtaG9va3NcIjogXCJeNC42LjBcIixcbiAgICBcImVzbGludC1wbHVnaW4tc3Rvcnlib29rXCI6IFwiXjAuNi4xMVwiLFxuICAgIFwiZnJhbWVyLW1vdGlvblwiOiBcIl4xMC4xMS42XCIsXG4gICAgXCJwb3N0Y3NzXCI6IFwiXjguNC4yMVwiLFxuICAgIFwicHJldHRpZXJcIjogXCJsYXRlc3RcIixcbiAgICBcInJlbWVkYVwiOiBcIl4xLjEyLjBcIixcbiAgICBcInN0b3J5Ym9va1wiOiBcIl43LjAuMC1yYy40XCIsXG4gICAgXCJ0YWlsd2luZGNzc1wiOiBcIl4zLjIuN1wiLFxuICAgIFwidGlueS1pbnZhcmlhbnRcIjogXCJeMS4zLjFcIixcbiAgICBcInRzdXBcIjogXCJeNi42LjNcIixcbiAgICBcInR5cGVzY3JpcHRcIjogXCJeNC45LjVcIixcbiAgICBcInZpdGVcIjogXCJeNC4yLjBcIixcbiAgICBcInZpdGUtcGx1Z2luLWR0c1wiOiBcIl4xLjcuM1wiXG4gIH0sXG4gIFwibWFpblwiOiBcIi4vZGlzdC9pbmRleC5janNcIixcbiAgXCJtb2R1bGVcIjogXCIuL2Rpc3QvaW5kZXguanNcIixcbiAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9pbmRleC5kLnRzXCIsXG4gIFwiZmlsZXNcIjogW1xuICAgIFwiZGlzdC8qKlwiXG4gIF0sXG4gIFwiZXhwb3J0c1wiOiB7XG4gICAgXCIuXCI6IHtcbiAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0L2luZGV4LmpzXCIsXG4gICAgICBcInJlcXVpcmVcIjogXCIuL2Rpc3QvaW5kZXguY2pzXCJcbiAgICB9LFxuICAgIFwiLi9wYWNrYWdlLmpzb25cIjogXCIuL3BhY2thZ2UuanNvblwiLFxuICAgIFwiLi9kaXN0L2luZGV4LmNzc1wiOiBcIi4vZGlzdC9pbmRleC5jc3NcIixcbiAgICBcIi4vdGFpbHdpbmQuY29uZmlnXCI6IFwiLi90YWlsd2luZC5jb25maWcuY2pzXCJcbiAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFnYSxTQUFTLGVBQWU7QUFFeGIsT0FBTyxXQUFXO0FBQ2xCLFNBQVMsb0JBQW9CO0FBQzdCLE9BQU8sU0FBUzs7O0FDU2QsbUJBQWdCO0FBQUEsRUFDZCxrQkFBa0I7QUFBQSxFQUNsQixvQkFBb0I7QUFBQSxFQUNwQixzQkFBc0I7QUFBQSxFQUN0Qix5QkFBeUI7QUFBQSxFQUN6Qix5QkFBeUI7QUFBQSxFQUN6QixZQUFZO0FBQUEsRUFDWixTQUFXO0FBQUEsRUFDWCxlQUFlO0FBQUEsRUFDZixPQUFTO0FBQUEsRUFDVCxtQkFBbUI7QUFBQSxFQUNuQixrQkFBa0I7QUFBQSxFQUNsQixhQUFhO0FBQUEsRUFDYixhQUFhO0FBQ2Y7OztBRDNCRixJQUFNLG1DQUFtQztBQVF6QyxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixTQUFTO0FBQUEsSUFDUCxNQUFNO0FBQUEsSUFDTixJQUFJO0FBQUEsTUFDRixTQUFTLENBQUMsWUFBWTtBQUFBLElBQ3hCLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDUCxPQUFPLENBQUMsRUFBRSxNQUFNLEtBQUssYUFBYSxRQUFRLGtDQUFXLEtBQUssRUFBRSxDQUFDO0FBQUEsRUFDL0Q7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxNQUNILE9BQU8sUUFBUSxrQ0FBVyxjQUFjO0FBQUEsTUFDeEMsTUFBTTtBQUFBLE1BQ04sU0FBUyxDQUFDLE1BQU0sS0FBSztBQUFBLE1BQ3JCLFVBQVUsQ0FBQyxXQUFXLFNBQVM7QUFBQSxJQUNqQztBQUFBLElBQ0EsZUFBZTtBQUFBLE1BQ2IsVUFBVSxDQUFDLEdBQUcsT0FBTyxLQUFpQixZQUFZLENBQUM7QUFBQSxJQUNyRDtBQUFBLEVBQ0Y7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
